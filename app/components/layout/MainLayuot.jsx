import SideBar from './SideBar'
import Header from './Header'
import { observer } from 'mobx-react-lite'
import { ErrorAlert, MessageAlert } from '../shared/Alert'
import { useContext, useEffect } from 'react'
import { StoreContext } from '@/pages/_app'
import { AuthContext } from '@/context/AuthContainer'
import Registration from '../shared/modals/auth/Registration'
import Login from '../shared/modals/auth/Login'
import Checker from '../shared/modals/Checker'
import Logo from './Logo'
import Head from 'next/head'


function MainLayout({ children }) {

   const { main } = useContext(StoreContext)
   const { toUnAuth, login, registration } = useContext(AuthContext)

   return (
      <>
         <Head>
            <title>BlueTrade.</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
            <link rel="preconnect" href="https://fonts.googleapis.com" />
            <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
            <link href="https://fonts.googleapis.com/css2?family=Inter&display=swap" rel="stylesheet" />
         </Head>
         <main className='background'>
            <div className='box_main '>
               <Header />
               <div className='navbar_left'>
                  <div className='navbar_left__logo'>
                     <Logo />
                  </div>
                  <SideBar />
               </div>
               {children}
            </div>
         </main>

         <ErrorAlert />
         <MessageAlert />

         {
            main.checker.str ?
               <Checker
                  toContinue={main.checker.func}
                  toClose={() => { main.setChecker(null, () => { }) }}
                  str={main.checker.str}
               />
               :
               <></>
         }
         {
            main.isOpenLogin ?
               <Login
                  isOpen={main.isOpenRegistration}
                  onSubmit={login}
                  linkSecondWindow={() => main.openRegistration()}
                  toClose={toUnAuth}
               />
               :
               <></>
         }

         {main.isOpenRegistration ?
            <Registration
               isOpen={main.isOpenRegistration}
               onSubmit={registration}
               linkSecondWindow={() => main.openLogin()}
               toClose={toUnAuth}
            />
            :
            <></>
         }

      </>
   )
}

export default observer(MainLayout)

